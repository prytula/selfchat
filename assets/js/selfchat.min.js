/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/selfchat.js":
/*!*************************!*\
  !*** ./src/selfchat.js ***!
  \*************************/
/***/ (function() {

eval("// eslint-disable-next-line no-undef\r\nconst { _x, _nx, sprintf } = window.wp.i18n\r\n\r\nconst standartHeaders = {\r\n  'Cache-Control': 'no-cache',\r\n  'X-WP-Nonce': window.Selfchat.nonce,\r\n  Pragma: 'no-cache',\r\n  Expires: '0',\r\n  'Content-Type': 'application/json',\r\n}\r\nasync function setSelfchatOption(option, value) {\r\n  const response = await fetch(\r\n    window.Selfchat.restUrl.concat('userSettings/save'),\r\n    {\r\n      method: 'POST',\r\n      headers: standartHeaders,\r\n      body: JSON.stringify({\r\n        option: option,\r\n        value: typeof value == 'boolean' ? (value ? 'true' : 'false') : value,\r\n      }),\r\n    }\r\n  )\r\n  if (!response.ok) {\r\n    const message = sprintf(\r\n      _x(`An error has occured: %s`, 'JS', 'selfchat'),\r\n      response.status\r\n    )\r\n    throw new Error(message)\r\n  }\r\n  const json = await response.json()\r\n  return json\r\n}\r\n\r\nasync function getSelfchatOptions() {\r\n  const response = await fetch(\r\n    window.Selfchat.restUrl\r\n      .concat('userSettings')\r\n      .concat('?nocache=')\r\n      .concat(new Date().getTime()),\r\n    {\r\n      method: 'GET',\r\n      headers: standartHeaders,\r\n    }\r\n  )\r\n  const json = await response.json()\r\n  return json\r\n}\r\n\r\nfunction promiseState(promise) {\r\n  const pendingState = { status: 'pending' }\r\n\r\n  return Promise.race([promise, pendingState]).then(\r\n    (value) =>\r\n      value === pendingState ? value : { status: 'fulfilled', value },\r\n    (reason) => ({ status: 'rejected', reason })\r\n  )\r\n}\r\n\r\nconst debounce = (context, func, delay) => {\r\n  let timer\r\n\r\n  return (...args) => {\r\n    if (timer) {\r\n      clearTimeout(timer)\r\n    }\r\n\r\n    timer = setTimeout(() => {\r\n      func.apply(context, args)\r\n    }, delay)\r\n  }\r\n}\r\n\r\nwindow.onload = (e) => {\r\n  let SelfchatLastOptions\r\n  const saveSettingsDebounced = debounce(\r\n    this,\r\n    (id, value, callbackOnSuccess = undefined, callbackOnFail = undefined) => {\r\n      setSelfchatOption(id, value)\r\n        .catch((error) => {\r\n          if (callbackOnFail) {\r\n            callbackOnFail(error)\r\n          } else {\r\n            console.log(error)\r\n          }\r\n          window.BBPMError(error.message)\r\n        })\r\n        .then((json) => {\r\n          if (callbackOnSuccess) {\r\n            callbackOnSuccess(json)\r\n          }\r\n          window.BBPMNotice(json.message)\r\n        })\r\n    },\r\n    800\r\n  )\r\n  const setDarkTheme = () => {\r\n    document.body.classList.remove('bm-messages-light')\r\n    document.body.classList.add('bm-messages-dark')\r\n  }\r\n  const setLightTheme = () => {\r\n    document.body.classList.remove('bm-messages-dark')\r\n    document.body.classList.add('bm-messages-light')\r\n  }\r\n  const observer = new MutationObserver((mutations) => {\r\n    mutations.forEach((mutation) => {\r\n      if (!mutation.addedNodes) return\r\n      mutation.addedNodes.forEach((node) => {\r\n        if (node.classList && node.classList.contains('bm-user-settings')) {\r\n          SelfchatLastOptions = getSelfchatOptions()\r\n        } else {\r\n          if (node.classList && node.classList.contains('bpbm-user-options')) {\r\n            if (!SelfchatLastOptions) SelfchatLastOptions = getSelfchatOptions()\r\n            let forcedLoaderElement\r\n            if (promiseState(SelfchatLastOptions).status !== 'fulfilled') {\r\n              node.style.display = 'none'\r\n              forcedLoaderElement = Object.assign(\r\n                document.createElement('div'),\r\n                {\r\n                  className: 'bm-loading',\r\n                }\r\n              )\r\n              forcedLoaderElement.append(\r\n                (() => {\r\n                  let icon = Object.assign(document.createElement('span'), {\r\n                    className: 'bm-loading-icon',\r\n                  })\r\n                  icon\r\n                    .appendChild(\r\n                      Object.assign(document.createElement('div'), {\r\n                        className: 'bm-wait-abit',\r\n                      })\r\n                    )\r\n                    .append(\r\n                      document.createElement('div'),\r\n                      document.createElement('div'),\r\n                      document.createElement('div'),\r\n                      document.createElement('div'),\r\n                      document.createElement('div'),\r\n                      document.createElement('div'),\r\n                      document.createElement('div'),\r\n                      document.createElement('div')\r\n                    )\r\n                  return icon\r\n                })(),\r\n                Object.assign(document.createElement('span'), {\r\n                  className: 'bm-loading-text',\r\n                  innerHTML: _x('Loading', 'JS', 'selfchat'),\r\n                })\r\n              )\r\n              node.parentNode.append(forcedLoaderElement)\r\n            }\r\n            SelfchatLastOptions.then((json) => {\r\n              if (forcedLoaderElement) {\r\n                node.style.removeProperty('display')\r\n                forcedLoaderElement.remove()\r\n              }\r\n\r\n              let optionsGroupTitleElement = node.firstChild.firstChild\r\n              if (\r\n                optionsGroupTitleElement.classList &&\r\n                optionsGroupTitleElement.classList.contains(\r\n                  'bpbm-user-option-title'\r\n                ) &&\r\n                optionsGroupTitleElement.innerHTML === json[0].title\r\n              ) {\r\n                json[0].options.forEach((option) => {\r\n                  const optionsGroupOptionElement = Object.assign(\r\n                    document.createElement('div'),\r\n                    {\r\n                      className: 'bpbm-user-option',\r\n                    }\r\n                  )\r\n                  optionsGroupOptionElement.append(\r\n                    Object.assign(document.createElement('input'), {\r\n                      id: option.id,\r\n                      onchange: (e) => {\r\n                        let sendValue = e.target.checked,\r\n                          successCallback\r\n                        if (option.id === 'dark_theme') {\r\n                          switch (e.target.value) {\r\n                            case 'auto':\r\n                              e.target.indeterminate = false\r\n                              e.target.checked = false\r\n                              e.target.value = 'no'\r\n                              break\r\n                            case 'no':\r\n                              e.target.indeterminate = false\r\n                              e.target.checked = true\r\n                              e.target.value = 'yes'\r\n                              break\r\n                            case 'yes':\r\n                              e.target.indeterminate = true\r\n                              e.target.checked = false\r\n                              e.target.value = 'auto'\r\n                              break\r\n                          }\r\n                          sendValue = e.target.value\r\n                          successCallback = (json) => {\r\n                            if (json.options.set_theme === 'dark') {\r\n                              setDarkTheme()\r\n                            } else {\r\n                              setLightTheme()\r\n                            }\r\n                          }\r\n                        }\r\n                        saveSettingsDebounced(\r\n                          option.id,\r\n                          sendValue,\r\n                          successCallback\r\n                        )\r\n                      },\r\n                      className: 'bpbm-checkbox',\r\n                      type: 'checkbox',\r\n                      defaultChecked: option.checked,\r\n                      value: option.value,\r\n                      indeterminate: option.value == 'auto' ? true : false,\r\n                    }),\r\n                    Object.assign(document.createElement('label'), {\r\n                      htmlFor: option.id,\r\n                      textContent: option.label,\r\n                    }),\r\n                    Object.assign(document.createElement('div'), {\r\n                      className: 'bpbm-user-option-description',\r\n                      textContent: option.desc,\r\n                    })\r\n                  )\r\n                  node.firstChild.append(optionsGroupOptionElement)\r\n                })\r\n              }\r\n            }).catch((json) => {\r\n              if (forcedLoaderElement) {\r\n                let loadingIcon =\r\n                  forcedLoaderElement.querySelector('.bm-loading-icon')\r\n                if (loadingIcon) {\r\n                  loadingIcon.innerHTML = '&#x26A0;'\r\n                  loadingIcon.style.fontSize = '64px'\r\n                  loadingIcon.style.marginTop = '20px'\r\n                }\r\n                let loadingText =\r\n                  forcedLoaderElement.querySelector('.bm-loading-text')\r\n                if (loadingText) {\r\n                  loadingText.innerHTML = _x('Error', 'JS', 'selfchat')\r\n                }\r\n              }\r\n            })\r\n          }\r\n        }\r\n      })\r\n    })\r\n  })\r\n  observer.observe(document.body, {\r\n    childList: true,\r\n    subtree: true,\r\n  })\r\n}\r\n\n\n//# sourceURL=webpack://selfchat/./src/selfchat.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/selfchat.js"]();
/******/ 	
/******/ })()
;